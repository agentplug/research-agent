---
description: Call when do project level implementation design (high level)
globs: 
alwaysApply: false
---
# Project Implementation Design Framework - Hierarchical Structure

## Purpose
This framework serves to create **project-level implementation design documents** that transform architecture designs into high-level implementation plans. These documents define module boundaries, integration strategies, and implementation phases that serve as the foundation for detailed module-level implementation docs.

**Hierarchical Structure:**
1. **Architecture Design** (`.architecture_design/`) - System-level design and technical decisions
2. **Project Implementation Design** (`.implementation_design/`) - High-level implementation plan with module breakdown
3. **Module Implementation Design** (`.implementation_design/modules/`) - Detailed implementation for each module

## Core Principles

### 1. Hierarchical Design Principle
- **Project-level docs define WHAT and WHY** - module boundaries, integration strategy, success criteria
- **Module-level docs define HOW** - detailed implementation, technical decisions, code structure
- **Clear separation of concerns** between project and module responsibilities
- **Reference architecture designs** to maintain design integrity

### 2. Module-First Design
- **Define clear module boundaries** before any implementation
- **Specify module interfaces** with input/output contracts
- **Document module dependencies** and integration points
- **Enable parallel development** through well-defined interfaces

### 3. User Value Progression
- **Every phase must deliver measurable user value**
- **Phase success criteria tied to business outcomes**
- **Technical improvements serve user benefits**
- **Incremental delivery of value**

### 4. Quality Gates and Standards
- **Code review mandatory between phases**
- **Progressive quality standards** (Phase 0 → Phase 3)
- **Test-driven development** at module level
- **Clear go/no-go criteria** for phase transitions

## Project Implementation Design Document Template

```markdown
# [Project Name] Implementation Design

## Architecture Reference
**Architecture Design**: [Link to architecture design in `.architecture_design/` folder]
**Architecture Version**: [Version/Date of architecture design being implemented]

## Problem Definition
**Problem:** [Clear, specific problem description]
**Current State:** [Quantifiable baseline - what's happening now]
**Target State:** [Quantifiable target - what "solved" looks like]
**Impact:** [Why this matters - business/user impact]

## Project Overview
**High-Level Goal**: [What this project accomplishes]
**Key Success Metrics**: [Quantifiable success criteria for the entire project]
**Timeline**: [Overall project timeline with phase breakdown]

## Module Architecture

### Module Breakdown
**Total Modules**: [Number of modules]
**Core Modules**: [List of essential modules]
**Supporting Modules**: [List of supporting/infrastructure modules]

### Module Definitions

#### Module 1: [Module Name]
**Purpose**: [What this module accomplishes]
**Responsibility**: [What this module is responsible for]
**Key Features**: [Main functionality this module provides]
**Dependencies**: [Other modules this depends on]
**Interface**: [High-level API/interface description]
**Implementation Priority**: [High/Medium/Low]

#### Module 2: [Module Name]
**Purpose**: [What this module accomplishes]
**Responsibility**: [What this module is responsible for]
**Key Features**: [Main functionality this module provides]
**Dependencies**: [Other modules this depends on]
**Interface**: [High-level API/interface description]
**Implementation Priority**: [High/Medium/Low]

[Continue for all modules...]

### Module Dependencies
```
Module A → Module B (depends on)
Module B → Module C (depends on)
Module A → Module C (indirect dependency)
```

### Integration Strategy
**Integration Points**: [Key points where modules interact]
**Data Flow**: [How data flows between modules]
**Error Handling**: [How errors propagate between modules]
**Testing Strategy**: [How to test module interactions]

## Implementation Phases

### Phase 0: Core Foundation
**Goal**: Establish core modules and prove fundamental approach
**Duration**: [X days]
**Modules to Implement**: [List of core modules]
**Success Criteria**: [Project-level success criteria]
**Deliverables**: [High-level deliverables]
**Quality Gate**: [Review requirements]

### Phase 1: Core Functionality
**Goal**: Deliver basic user value through core modules
**Duration**: [X days]
**Modules to Implement**: [List of modules]
**Success Criteria**: [Project-level success criteria]
**Deliverables**: [High-level deliverables]
**Quality Gate**: [Review requirements]

### Phase 2: Enhanced Functionality
**Goal**: Improve reliability and user experience
**Duration**: [X days]
**Modules to Implement**: [List of modules]
**Success Criteria**: [Project-level success criteria]
**Deliverables**: [High-level deliverables]
**Quality Gate**: [Review requirements]

### Phase 3: Production Ready
**Goal**: Polish and optimize for production
**Duration**: [X days]
**Modules to Implement**: [List of modules]
**Success Criteria**: [Project-level success criteria]
**Deliverables**: [High-level deliverables]
**Quality Gate**: [Review requirements]

## Technical Architecture

### System Architecture
[High-level system diagram showing module relationships]

### Technology Stack
**Backend**: [Technology choices and rationale]
**Frontend**: [Technology choices and rationale]
**Database**: [Technology choices and rationale]
**Infrastructure**: [Technology choices and rationale]

### Data Architecture
**Data Models**: [High-level data model overview]
**Data Flow**: [How data moves through the system]
**Storage Strategy**: [Data storage and persistence approach]

### Security Architecture
**Authentication**: [Authentication strategy]
**Authorization**: [Authorization strategy]
**Data Protection**: [Data security approach]

## Development Strategy

### Parallel Development Plan
**Module Independence**: [How modules can be developed in parallel]
**Interface Contracts**: [How module interfaces are defined]
**Mock Data Strategy**: [How to provide test data for modules]
**Integration Testing**: [How to test module interactions]

### Quality Assurance Strategy
**Testing Approach**: [Overall testing strategy]
**Code Review Process**: [Review process and standards]
**Quality Gates**: [Quality checkpoints between phases]
**Performance Requirements**: [Performance expectations]

### Risk Management
**Technical Risks**: [Identified technical risks and mitigations]
**Integration Risks**: [Risks related to module integration]
**Timeline Risks**: [Schedule risks and mitigations]
**Resource Risks**: [Resource-related risks and mitigations]

## Success Metrics and Validation

### Phase Success Criteria
**Phase 0**: [Specific, measurable criteria]
**Phase 1**: [Specific, measurable criteria]
**Phase 2**: [Specific, measurable criteria]
**Phase 3**: [Specific, measurable criteria]

### User Value Metrics
**User Experience**: [How user value is measured]
**Performance**: [Performance metrics and targets]
**Reliability**: [Reliability metrics and targets]
**Adoption**: [Adoption and usage metrics]

## Module Implementation Guidelines

### Module Implementation Design Requirements
Each module must have its own implementation design document that includes:
- [ ] **Detailed technical approach** for the module
- [ ] **Interface specifications** with input/output contracts
- [ ] **Implementation phases** specific to the module
- [ ] **Unit testing strategy** for the module
- [ ] **Integration testing** with other modules
- [ ] **Success criteria** specific to the module

### Module Implementation Standards
- [ ] **Test-driven development** - write tests before implementation
- [ ] **Code review mandatory** for all module implementations
- [ ] **Documentation** of module interfaces and usage
- [ ] **Error handling** appropriate for the module's responsibility
- [ ] **Performance considerations** for the module's role

### Module Integration Standards
- [ ] **Interface compliance** - modules must implement defined interfaces
- [ ] **Integration testing** - test module interactions
- [ ] **Error propagation** - handle errors between modules
- [ ] **Data consistency** - maintain data integrity across modules

## Project Management Integration

### Progress Tracking
**For_Project_Manager.md**: [Reference to project manager tracking document]
**Phase Completion Criteria**: [Clear criteria for phase completion]
**Module Completion Criteria**: [Clear criteria for module completion]
**Quality Gates**: [Review and approval requirements]

### Communication Strategy
**Stakeholder Updates**: [How progress is communicated]
**Technical Reviews**: [Review process and participants]
**Issue Escalation**: [How issues are escalated and resolved]

## File Organization

### Project Structure
```
project/
├── .architecture_design/           # Architecture design documents
│   └── [project_name].md          # Referenced architecture design
├── .implementation_design/         # Project implementation design documents
│   ├── [project_name].md          # This project implementation design
│   └── modules/                   # Module-level implementation designs
│       ├── [module_1].md          # Module 1 implementation design
│       ├── [module_2].md          # Module 2 implementation design
│       └── [module_n].md          # Module N implementation design
├── For_Project_Manager.md         # Project manager tracking document
├── backend/                       # Backend implementation
├── frontend/                      # Frontend implementation
├── tests/                         # Test implementation
├── docs/                          # Documentation
└── examples/                      # Working examples
```

### Document Relationships
- **Architecture Design** → **Project Implementation Design** (transforms architecture to implementation plan)
- **Project Implementation Design** → **Module Implementation Designs** (defines module boundaries and requirements)
- **Module Implementation Designs** → **Actual Implementation** (guides detailed implementation)

## Quality Standards

### Project Implementation Design Quality
- [ ] **Clear module boundaries** with well-defined responsibilities
- [ ] **Realistic phase breakdown** with achievable timelines
- [ ] **Measurable success criteria** for each phase
- [ ] **Clear integration strategy** between modules
- [ ] **Risk identification and mitigation** strategies
- [ ] **Alignment with architecture design** principles

### Review Process
**Project Implementation Design Review**:
- [ ] **Architecture alignment** - design follows architecture principles
- [ ] **Module design** - clear boundaries and interfaces
- [ ] **Phase planning** - realistic and achievable phases
- [ ] **Integration strategy** - viable approach to module integration
- [ ] **Risk assessment** - risks identified and mitigated
- [ ] **Success criteria** - measurable and meaningful criteria

## Anti-Patterns to Avoid

### Project-Level Anti-Patterns
❌ **Vague Module Boundaries**: "We'll figure out the modules as we go"
✅ **Clear Module Definition**: Define module boundaries and interfaces upfront

❌ **Phase Without Value**: "Phase 1: Set up infrastructure"
✅ **Value-Driven Phases**: Every phase delivers user value

❌ **No Integration Strategy**: "We'll integrate when all modules are done"
✅ **Integration-First Design**: Design integration strategy before implementation

❌ **Generic Success Criteria**: "Improve performance"
✅ **Specific Success Criteria**: "Reduce search time from 2 minutes to 30 seconds"

❌ **Module Coupling**: Modules tightly coupled to each other
✅ **Module Independence**: Modules can be developed and tested independently

## Remember

> "A good project implementation design enables parallel development while ensuring successful integration"

- **Project-level design focuses on WHAT and WHY**
- **Module-level design focuses on HOW**
- **Clear interfaces enable parallel development**
- **Integration strategy is as important as module design**
- **Success criteria must be measurable and meaningful**
- **Quality gates ensure continuous improvement**
- **Documentation serves as the foundation for implementation**

**File Organization:**
- **Architecture designs**: Save in `.architecture_design/` folder
- **Project implementation designs**: Save in `.implementation_design/` folder
- **Module implementation designs**: Save in `.implementation_design/modules/` folder
- **Project manager tracking**: Save as `For_Project_Manager.md`

**Purpose**: This framework helps create project-level implementation design documents that serve as the foundation for detailed module-level implementation, enabling parallel development while ensuring successful integration.
